03.07.2023

Что есть программирование. Разделение на hardware и software.


1. Точки зрения на программирование
- математический взгляд (машины Тьюринга, лямбда-исчисление).
- управление машиной (архитектура фон Неймана)
- парадигмы программирования
- высокоуровневый взгляд

2. 
Исполнение инструкций происходит в соответствии с принципами программного управления (Чарльз Беббидж, Джон фон Нейман):
1) Обрабатываемая информация кодируется двоичными цифрами и разделяется на единицы. Минимальная доступная для непосредственного доступа единица информации называется байтом (обычно равна 8 бит), максимальная - машинным словом (равна разрядности процессора).
Алгоритм вычислений представляется в форме программы, состоящей из последовательности команд (записанных также в двоичной форме). Каждая команда предписывает некоторую операцию.
2) Команды хранятся в последовательности смежных ячеек памяти и выполняются в естественном порядке. При необходимости естественный порядок может быть изменен. Могут быть специальные инструкции передачи управления, либо в каждой инструкции указывается адрес следующей.
3) Команды и данные хранятся в одной памяти.

Структура машины (архитектура фон Неймана): АЛУ, УУ, ОЗУ, УВВ.

Функционирование машины заключается в повторении до останова последовательности шагов:
1) чтение команды;
2) декодирование кода операции;
3) выборка операндов;
4) выполнение операции;
5) запись результата;
6) определение адреса следующей команды.



3. Команды аппаратного процессора составляют машинный язык.
Можно создать новый язык, состоящий из новых более сложных команд, реализуемых простыми командами процессора. Получаем виртуальную машину - программную надстройку над аппаратным компьютером, понимающую расширенный язык.
Для перевода языка виртуальной машины в машинный применяются два подхода: трансляция и интерпретация.
Аппаратное и построенное над ним программное обеспечение можем представлять в виде иерархии виртуальных машин.

Простейшим языком, который можно построить над машинным, является язык ассемблера, который по сути соответствует машинному языку, но более удобен в использовании, благодаря предоставлению более высокоуровневых возможностей:
- мнемоники инструкций;
- идентификаторы для ячеек памяти (переменные);
- макросы;
- функции.

Вызов функций. Стек. Передача аргументов. Локальные переменные.

Языки высокого уровня предоставляют более высокоуровневые конструкции, отдаляя программиста от реальной машины.

4. Императивная парадигма программирования (максимально приближена к архитектура фон Неймана и машине Тьюринга).
Оносные понятия императивных ЯП:
- переменные различных типов
- операторы присваивания
- повторение действий в форме оператора присваивания
Множество всех значений ячеек памяти определяют состояние компьютера. Программа состоит из последовательности действий изменяющих состояние компьютера. Программа описывает процесс преобразования исходного состояния (входных данных) по заданному алгоритму в конечное состояние (выходные данные).

Процедурное программирование

Структурное программирование

Модульное программирование


5. Изменение задачи программирования: от задач вычисления (естественных для компьютера) к проблеме моделирования реального мира. Из-за этого радикально повышается сложность программирования.
Основная идея в программировании - борьба со сложностью.

Этапы создания программного продукта:
- формулировка задачи
- моделирование задачи (формулировка понятий предметной области на компьютерном языке)
- проектирование системы
- кодирование
- тестирование (возврат к предыдущим этапам)
- модификация требований (возврат к предыдущим этапам)
- сопровождение
- рефакторинг
- реинжиниринг

Проблемы:
- выявление требований
- эмуляция сущностей реального мира
- борьба со сложностью
- координация совместной работы большого количества программистов


6. Абстракция - упрощенное представление реальной сущности с важными для данного контекста характеристиками.
Абстракция - это и сам механизм и это представление.
Любой образ в голове - это абстракция. Любое познание реального мира неявно происходит через механизм абстракции. Над абстракциями реальных предметов можем строить другие абстракции (понятия), над ними следующие и т.д.
По сути любая наука абстрактна. Но обычно абстрактность математики и программирования подчёркивают особенно. Во-первых, в них механизм абстракции используется явно, во-вторых, он необычайно полезен.
В математике мы можем сформулировать некоторые утверждения для некоторой абстрактной сущности (например, группы) и они будут верны для всех ее конкретных реализаций.

Абстракция в программировании проявляется при моделировании объектов реального мира. Любая программная модель является по определению некоторым упрощённым представлением реальной сущности.


Инкапсуляция - такое размещение в контейнере данных и подпрограмм для их обработки, при котором доступ к данным возможен только с помощью подпрограмм (функций, методов) специально для этого предназначенных.
Инкапсуляция обеспечивает принцип сокрытия информации (лежащий в основе проектирования абстракций): каждый программный компонент, определяемый программистом, должен насколько возможно скрывать от пользователей информацию о своем внутреннем устройстве.
Зачем нужна инкапсуляция
- уменьшение связей;
- скрытие сложности;
- отслеживание обращений;
- отслеживание модификаций;
- возможность изменения внутреннего представления.

Тип данных определяет:
- структуру объекта;
- множество допустимых значений;
- допустимые операции.

Абстракция данных определяет:
- множество объектов данных с конкретным набором значений;
- набор операций над объектами данных;
- такую инкапсуляцию этих объектов и операций, при которой пользователь нового типа данных может манипулировать объектами данных только с помощью заданных операций.

Абстрактный тип данных (АТД) - это синтаксический контейнер, который включает определение данных только одного типа и подпрограммы, которые обеспечивают операции для этого типа.

Абстракция процессов и данных.
Абстракция вычислительного процесса. Развиваясь, вычислительный процесс манипулирует абстракцией данных. Эволюция процесса задаётся набором правил, называемых программой.


7. Создание кода.
Препроцессинг. Компиляция. Линковка.


8. Стиль программирования.
Форматирование кода.
Принципы декомпозиции кода (на функции, объекты, модули).
Имена функций, переменных, типов данных, атрибутов.



Задание.
Сгенерировать файл со случайными строками, считать строки из файла, отсортировать и вывести.
