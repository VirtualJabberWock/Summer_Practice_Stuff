12.07.2023


1. Библиотека GMP (GNU multiple precision arithmetic library).
Это одна из наиболее популярных библиотек для работы с большими (произвольной точности) числами.
В примере gmp демонстрируется работа с целыми большими числами.

Задание.
1) Обрабатывать простые бинарные арифметические действия над бошьшими числами, полученными из аргументов командной строки.
Пример запуска:
prog.exe 123412341234213412341234 + 12341324123412343124132
prog.exe 0x12341234afd1234 * 123412341234123
prog.exe 123413243214 / 2
prog.exe 13241324123423 * 8797139843481274
Допустимые операции:
* + - cdiv fdiv tdiv mod



2. Регулярные выражения (regular expressions, regexp)
Позволяют с помощью конечной последовательности символов задавать шаблон (структуру текста), которому удовлетворяет (потенциально бесконечное) множество строк.
Позволяют решать следующие задачи:
- проверка текста на соответствие некоторой структуре;
- поиск в тексте подстроки, удовлетворяющей шаблону;
- разбор выражения на составные части.

Символы регулярного выражения:
1) обычный символ (не метасимвол)	-> означает сам себя
a	->	a
Специальные символы (метасимволы) имеют особый смысл. Чтобы они означали сами себя, их необходимо экранировать символом \. Набор спецсимволов (может отличаться в разных стандартах): '\', '[', ']', '(', '(', '*', '+', '.', '^', '$', '?', '|'. 

2) класс символов: [abd], [0-9], [1234a-z]	-> один символ из класса
   [^a-z]	-> один любой символ не из класс
[abd]	->	"a", "b", "d"
[a-z][0-9]	->  "a1"

3) . - одно вхождение любого символа
. -> "a", " ", "1"

4) спецификаторы повторения
  * - повторение предыдущего 0 или больше раз
a*	-> "", "a", "aa", ...
.*  -> любая строка
  + - повторение предыдущего 1 или больше раз
[0-9]+	-> "0", "1", "1234123411413"
  {i, j} - повторение предыдущего от i до j раз
.{1, 4} -> любая строка длиной от 1 до 4
  {, j} = {0, j} - повторение предыдущего не более j раз
  {i, } - повторение предыдущего не менее i раз

5) группировка
  ()
(a[1-9])+	-> "a2", "a1a8"

6) специальные имена для некоторых классов символов
\s = [ \f\n\r\t\v] - любой пробельный символ
\S = [^ \f\n\r\t\v]
\w = [:word:]- любой буквенно-цифровой символ и символ '_'
\d = [:digit:] = [0-9] - любая цифра
...

7) указание места подстроки, соответствующей регулярному выражению, в тексте
  ^ - совпадение с регулярным выражением должно быть от начала строки
a	-> "...a..."
^a	-> "a..."
  $ - совпадение с регулярным выражением должно быть в конце строки
a$  -> "...a"
^a$ -> "a"

8) выбор одного из двух альтернативных выражений
  expr1 | expr2	- подстрока удовлетворяющая либо первому выражению, либо второму
a | b -> "a", "b"
(ab+) | [0-9]*	-> "ab", "abb", "", "0", ...



Наиболее популярными являются Perl-совместимые регулярные выражения  (Perl Compatible Regular Expressions - PCRE).
Описание регулярных выражений Perl: http://perldoc.perl.org/perlre.html
Одна из популярных библиотек, реализующих эти регулярные выражения, так и называется PCRE (http://pcre.org).
В этой библиотеке рассмотрим только простой POSIX-совместимый интерефейс. Библиотека предоставляет еще множество функций, описание которых можно найти в документации.
В примере pcre демонстрируется работа с этой библиотекой.
В примере expr регулярные выражения из библиотеки используются для разбора арифметических выражений с поддержкой именованных переменных.


Задание
В пример expr добавить распознавание выражений:
var1 + var1
10 + 10
var1 = var2
var1 = var2 + 10

аналогично для операций -, *, /

