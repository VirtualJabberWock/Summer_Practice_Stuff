11.07.2023


1. Пользовательские типы данных.
Для представления пользовательских типов данных в языке С используются структуры. Для работы с ними создаются функции, принимающие в качестве аргумента указатель на структуру.
Структуры могут использоваться для решения нескольких задач:
- структурирование памяти;
- способ объединения разнотипных данных;
- пользовательские типы данных.



2. Сценарии использования структур в качестве пользовательских типов данных.
struct Polynom {
	...
};

1) функция инициализации (тогда память под структуру выделяется нами)
// функция инициализации многочлена
void InitPolynom (struct Polynom *pol);

void fun () {
	// выделение памяти
	struct Polynom pol;

	InitPolynom (&pol)
}

приём, чтобы не писать &, но передавать по указателю
typedef struct Polynom PolynomType[1];

void fun () {
	PolynomType pol;	// struct Polynom pol[1];

	InitPolynom (pol);

}

2) функция создания (инициализация и выделение памяти происходит в функции создания)
struct Polynom * CreatePolynom (...) {}
void DeletePolynom (struct *Polynom) {}
typedef struct Polynom * Polynom;

void fun () {

	//struct Polynom *pol = CreatePolynom (...);
	Polynom pol = CreatePolynom (...);

	PrintPolynom (pol);

	DeletePolynom (pol);
}


3. Полиморфизм.
1) Статический полиморфизм.
Код функции будет написан один раз. Во время компиляции будет сгенерирован различный код для различных типов аргументов.
Пример в каталоге examples\1.

2) Динамический полиморфизм.
Одна и та же функция может принимать и обрабатывать различные типы аргументов.
Пример в каталоге examples\2.